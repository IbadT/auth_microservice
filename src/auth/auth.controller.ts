/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-argument */
import { Controller, Logger } from '@nestjs/common';
import { GrpcMethod } from '@nestjs/microservices';
import { AuthService } from './auth.service';
import {
  LoginRequest,
  LoginResponse,
  RegisterRequest,
  RegisterResponse,
  RefreshTokenRequest,
  RefreshTokenResponse,
} from './src/auth/auth';
import { SecurityLoggerService } from '../security/security-logger.service';
import { BruteForceService } from '../security/services/brute-force.service';
import { SecureAuthService } from '../security/services/secure-auth.service';
import { EnhancedJwtService } from '../security/services/enhanced-jwt.service';
import { TwoFactorAuthService } from '../security/services/two-factor-auth.service';
import { AnomalyDetectionService } from '../security/services/anomaly-detection.service';
import { EncryptionService } from '../security/services/encryption.service';
import { PrismaService } from '../prisma.service';


// node test-grpc-client.js

@Controller()
export class AuthController {
  private readonly logger = new Logger(AuthController.name);
  constructor(
    private readonly authService: AuthService,
    private readonly securityLogger: SecurityLoggerService,
    private readonly bruteForceService: BruteForceService,
    private readonly secureAuthService: SecureAuthService,
    private readonly enhancedJwtService: EnhancedJwtService,
    private readonly twoFactorAuthService: TwoFactorAuthService,
    private readonly anomalyDetectionService: AnomalyDetectionService,
    private readonly encryptionService: EncryptionService,
    private readonly prismaService: PrismaService,
  ) {}

  @GrpcMethod('AuthService', 'login')
  async login(data: LoginRequest): Promise<LoginResponse> {
    const { email, password } = data;

    this.logger.log(
      `üîê [AUTH] LOGIN request received for email: ${email}`,
    );

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º brute force –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
      const isBlocked = await this.bruteForceService.isBlocked(email);
      if (isBlocked) {
        this.securityLogger.logAuthAttempt('gRPC', email, false);
        throw new Error('Too many failed attempts. Please try again later.');
      }

      // 2. –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
      const authResult = await this.secureAuthService.authenticateUser(
        email,
        password,
      );

      if (!authResult.success) {
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        await this.bruteForceService.recordFailedAttempt(email);
        this.securityLogger.logAuthAttempt('gRPC', email, false);
        throw new Error('Invalid credentials');
      }

      // 3. –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏—è
      const behavior = {
        userId: authResult.user.id,
        ipAddress: 'unknown', // –ë—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ gRPC –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        userAgent: 'unknown', // –ë—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ gRPC –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        action: 'login',
        success: true,
        timestamp: new Date(),
      };
      
      const anomalyScore = await this.anomalyDetectionService.analyzeUserBehavior(
        authResult.user.id,
        behavior,
      );

      if (anomalyScore.score > 0.7) {
        this.securityLogger.logAnomaly('gRPC', email, anomalyScore);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
      }

      // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã —Å JTI –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
      const tokens = await this.enhancedJwtService.generateTokens(
        authResult.user.id,
        authResult.user.email,
      );

      // 5. –®–∏—Ñ—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ–∫–µ–Ω–∞—Ö
      const encryptedAccessToken = this.encryptionService.encrypt(tokens.accessToken);
      const encryptedRefreshToken = this.encryptionService.encrypt(tokens.refreshToken);

      // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º 2FA —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.prismaService.user.findUnique({ where: { email } });
      if (user && user.twoFactorEnabled) {
        // –ï—Å–ª–∏ 2FA –≤–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è 2FA –ø—Ä–æ–≤–µ—Ä–∫–∏
        this.securityLogger.logJwtEvent('2FA_REQUIRED', `User ${email} requires 2FA verification`);
        return {
          accessToken: '2FA_REQUIRED',
          refreshToken: '2FA_REQUIRED',
        };
      }

      // 7. –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
      await this.bruteForceService.clearFailedAttempts(email);

      this.securityLogger.logAuthAttempt('gRPC', email, true);
      return {
        accessToken: encryptedAccessToken,
        refreshToken: encryptedRefreshToken,
      };
    } catch (error) {
      this.securityLogger.logAuthAttempt('gRPC', email, false);
      throw error;
    }
  }

  @GrpcMethod('AuthService', 'register')
  async register(data: RegisterRequest): Promise<RegisterResponse> {
    const { email, password } = data;

    this.logger.log(
      `üìù [AUTH] REGISTER request received for email: ${email}`,
    );

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
      const passwordValidation =
        this.secureAuthService.validatePasswordStrength(password);
      if (!passwordValidation.valid) {
        this.securityLogger.logRegistration('gRPC', email, false);
        throw new Error(
          `Password validation failed: ${passwordValidation.errors.join(', ')}`,
        );
      }

      // 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const tokens = await this.authService.register(data);

      this.securityLogger.logRegistration('gRPC', email, true);
      return {
        accessToken: tokens.accessToken,
        refreshToken: tokens.refreshToken,
      };
    } catch (error) {
      this.securityLogger.logRegistration('gRPC', email, false);
      throw error;
    }
  }

  @GrpcMethod('AuthService', 'refreshToken')
  async refreshToken(data: RefreshTokenRequest): Promise<RefreshTokenResponse> {
    this.logger.log(
      `üîÑ [AUTH] REFRESH_TOKEN request received`,
    );

    try {
      const tokens = await this.authService.refreshToken(data.refreshToken);
      this.securityLogger.logTokenRefresh('gRPC', true);
      return {
        accessToken: tokens.accessToken,
        refreshToken: tokens.refreshToken,
      };
    } catch (error) {
      this.securityLogger.logTokenRefresh('gRPC', false);
      throw error;
    }
  }

  @GrpcMethod('AuthService', 'enable2FA')
  async enable2FA(data: { userId: string }): Promise<{ qrCode: string; backupCodes: string[] }> {
    this.logger.log(
      `üîê [2FA] ENABLE request received for user ${data.userId}`,
    );

    try {
      const result = await this.twoFactorAuthService.enable2FA(data.userId, '');
      this.securityLogger.logJwtEvent('2FA_ENABLED', `User ${data.userId} enabled 2FA`);
      return result;
    } catch (error) {
      this.securityLogger.logSecurityError('2FA_ENABLE_FAILED', error.message);
      throw error;
    }
  }

  @GrpcMethod('AuthService', 'verify2FA')
  async verify2FA(data: { userId: string; token: string }): Promise<{ success: boolean }> {
    this.logger.log(
      `üîê [2FA] VERIFY request received for user ${data.userId}`,
    );

    try {
      const user = await this.prismaService.user.findUnique({ where: { id: data.userId } });
      if (!user || !user.twoFactorSecret) {
        throw new Error('2FA not enabled for this user');
      }

      const isValid = this.twoFactorAuthService.verifyTOTP(user.twoFactorSecret, data.token);
      this.securityLogger.logJwtEvent('2FA_VERIFIED', `User ${data.userId} 2FA verification: ${isValid}`);
      return { success: isValid };
    } catch (error) {
      this.securityLogger.logSecurityError('2FA_VERIFY_FAILED', error.message);
      throw error;
    }
  }

  @GrpcMethod('AuthService', 'getAnomalyStats')
  async getAnomalyStats(data: { userId: string }): Promise<any> {
    this.logger.log(
      `üìä [ANOMALY] STATS request received for user ${data.userId}`,
    );

    try {
      const stats = await this.anomalyDetectionService.getAnomalyStats(data.userId);
      this.securityLogger.logJwtEvent('ANOMALY_STATS', `Retrieved stats for user ${data.userId}`);
      return stats;
    } catch (error) {
      this.securityLogger.logSecurityError('ANOMALY_STATS_FAILED', error.message);
      throw error;
    }
  }
}
