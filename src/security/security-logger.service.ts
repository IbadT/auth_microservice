import { Injectable, Logger } from '@nestjs/common';


@Injectable()
export class SecurityLoggerService {
  private readonly logger = new Logger(SecurityLoggerService.name);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  logSuspiciousActivity(
    ip: string,
    method: string,
    url: string,
    reason: string,
  ): void {
    this.logger.warn(
      `üö® [SECURITY] SUSPICIOUS_ACTIVITY detected from IP: ${ip} | Method: ${method} | URL: ${url} | Reason: ${reason}`,
    );
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  logSuccess(ip: string, method: string, url: string): void {
    this.logger.log(
      `‚úÖ [SECURITY] SUCCESS request from IP: ${ip} | Method: ${method} | URL: ${url}`,
    );
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
  logError(ip: string, method: string, url: string, error: string): void {
    this.logger.error(
      `‚ùå [SECURITY] ERROR request from IP: ${ip} | Method: ${method} | Error: ${error}`,
    );
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
  logRateLimitExceeded(ip: string): void {
    this.logger.warn(
      `‚ö†Ô∏è [SECURITY] RATE_LIMIT_EXCEEDED for IP: ${ip}`,
    );
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP
  logIpBlocked(ip: string, reason: string): void {
    this.logger.warn(
      `üö´ [SECURITY] IP_BLOCKED | IP: ${ip} | Reason: ${reason}`,
    );
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
  logIpBlacklisted(ip: string): void {
    this.logger.warn(
      `üö´ [SECURITY] IP_BLACKLISTED | IP: ${ip}`,
    );
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
  logIpWhitelisted(ip: string): void {
    this.logger.log(
      `‚úÖ [SECURITY] IP_WHITELISTED | IP: ${ip}`,
    );
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  logSecurityError(error: string, details?: string): void {
    this.logger.error(
      `üí• [SECURITY] SECURITY_ERROR | Error: ${error}` +
        (details ? ` | Details: ${details}` : ''),
    );
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  logAuthAttempt(ip: string, email: string, success: boolean): void {
    const icon = success ? 'üîê' : 'üîì';
    const status = success ? 'SUCCESS' : 'FAILED';

    this.logger.log(
      `${icon} [AUTH] ${status} login attempt from IP: ${ip} for email: ${email}`,
    );
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  logRegistration(ip: string, email: string, success: boolean): void {
    const icon = success ? 'üìù' : '‚ùå';
    const status = success ? 'SUCCESS' : 'FAILED';

    this.logger.log(
      `${icon} [AUTH] ${status} registration from IP: ${ip} for email: ${email}`,
    );
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
  logTokenRefresh(ip: string, success: boolean): void {
    const icon = success ? 'üîÑ' : '‚ùå';
    const status = success ? 'SUCCESS' : 'FAILED';

    this.logger.log(
      `${icon} [AUTH] ${status} token refresh from IP: ${ip}`,
    );
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Å–æ–±—ã—Ç–∏–π
  logJwtEvent(event: string, details: string): void {
    this.logger.log(
      `üîë [JWT] ${event.toUpperCase()} | ${details}`,
    );
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Redis —Å–æ–±—ã—Ç–∏–π
  logRedisEvent(event: string, details: string): void {
    this.logger.log(
      `üóÑÔ∏è [REDIS] ${event.toUpperCase()} | ${details}`,
    );
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
  logAnomaly(protocol: string, email: string, anomalyScore: any): void {
    const severity = anomalyScore.score > 0.8 ? 'CRITICAL' : anomalyScore.score > 0.6 ? 'HIGH' : 'MEDIUM';

    this.logger.log(
      `üö® [ANOMALY_DETECTED] ${severity} score: ${anomalyScore.score.toFixed(2)} for ${email} via ${protocol}`,
    );

    // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏—Ç–∞
    // this.logToFile('ANOMALY_DETECTED', {
    //   protocol,
    //   email,
    //   anomalyScore,
    //   timestamp: new Date().toISOString(),
    // });
  }
}
